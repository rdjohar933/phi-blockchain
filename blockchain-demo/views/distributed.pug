extends layout

block content
  .modal#formModal
    .modal-content

      span#closeFormButton.close &times;

      form.form-horizontal#transactionForm
        .form-group
          .col-sm-10
        .form-group
          label.col-sm-2.control-label Sender:
          .col-sm-10
            input.form-control( id="sender")
        .form-group
          label.col-sm-2.control-label Receiver:
          .col-sm-10
            input.form-control( id="receiver")
        .form-group
          label.col-sm-2.control-label Amount:
          .col-sm-10
            input.form-control(type='number', id="amount")
        .form-group
          .col-sm-2
            i.icon-spinner.icon-spin.icon-large
          .col-sm-10
            button.btn.btn-primary.ladda-button(data-style='expand-right', id="send-transaction")
              span.ladda-label send transaction
  .container-lg.shadow-4-strong.pt-2.mt-2
    h1 #{__('Distributed Blockchain')}
    - var peers = {1: 'A', 2: 'B', 3: 'C'}
      each peer, chain in peers
        .d-flex.align-items-center.justify-content-between.mt-4
          .d-flex.align-items-center
            h3.mb-0 #{__('Peer')} #{peer}
            div.form-check.form-switch.ms-3.ml-4
              input.form-check-input(type="checkbox", role="switch", checked=true, id= `refreshSwitch-${peer}`)
              label.form-check-label.small(for=`refreshSwitch-${peer}`) enable auto refresh
          .ms-auto
            button.btn.btn-primary.ladda-button(id=`blockmineButton-${peer}`, data-style='expand-right')
              span.ladda-label #{__('Mine')}
            button.btn.btn-primary.ladda-button(id=`openFormButton-${peer}`, data-style='expand-right', onclick='openForm()')
              span.ladda-label Add Transaction
        .scrollable-horizontal
          .d-flex.flex-row.mt-4(id=`chain-${peer}`)



  script(src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")
  script.
    $(function() {
      fetchBlocks("A", 5001, 0)
      fetchBlocks("B", 5002, 1)
      fetchBlocks("C", 5003, 2)
      setup();
    });
    async function getChainBlocks(port) {
      try {
        const response = await axios.get(`http://localhost:${port}/chain`);
        const blocks = response.data.chain;
        return blocks
    } catch (error) {
    console.error('Error fetching blocks:', error);
    }
    }

    async function getHashedBlock(block, port) {
      try {
        const response = await axios.post(`http://localhost:${port}/hash`, block);
        block.hash = response.data.hash;
        return block
    } catch (error) {
    console.error('Error fetching blocks:', error);
    }
    }
    async function getHashedBlocksFromChain(port) {
      const blocks = await getChainBlocks(port)
      console.log(`retrieved ${blocks.length} blocks from blockchain`)
      return await Promise.all(blocks.map(block => getHashedBlock(block, port)));
    }
    async function fetchBlocks(elementId, port, chainId = 0) {
      if (!document.getElementById("refreshSwitch-"+elementId).checked) return;

      const blocks = await getHashedBlocksFromChain(port);
      const blockContainer = document.getElementById("chain-"+elementId);

      for (const block of blocks) {
        const existingBlock = document.getElementById('block' + block.index + 'chain' + chainId + 'well');
        const blockElement = await fetchBlockTemplate(block, chainId);
        const parser = new DOMParser();
        const newNode = parser.parseFromString(blockElement, 'text/html').body.firstChild;

        if (existingBlock) {
          existingBlock.replaceWith(newNode);
        } else {
          blockContainer.appendChild(newNode);
        }
      }
      const existingBlocks = blockContainer.children;
      while (existingBlocks.length > blocks.length) {
        blockContainer.removeChild(existingBlocks[existingBlocks.length - 1]);
      }
    }


    async function fetchBlockTemplate(block, chainId = 0) {
      try {
        const response = await axios.post('/render-block', {block, chainId});
        return response.data.html;
      } catch (error) {
        console.error('Error fetching block template:', error);
        return `<div>Error loading block ${block.index}</div>`;
      }
    }
    async function mineBlock(port, button)
    {
      button.disabled=true
      try {
        await axios.post(`http://localhost:${port}/block`);
      } catch (error) {
        console.error('Error fetching block template:', error);
      }
      button.disabled = false

    }
    function setup() {
      const refreshInterval = 10000

      const buttonA = document.getElementById('blockmineButton-A');
      const buttonB = document.getElementById('blockmineButton-B');
      const buttonC = document.getElementById('blockmineButton-C');
      buttonA.onclick= () => mineBlock(5001,buttonA)
      buttonB.onclick= () => mineBlock(5002,buttonB)
      buttonC.onclick= () => mineBlock(5003,buttonC)

      const formbuttonA = document.getElementById('openFormButton-A');
      const formbuttonB = document.getElementById('openFormButton-B');
      const formbuttonC = document.getElementById('openFormButton-C');
      formbuttonA.onclick = () => openForm(5001)
      formbuttonB.onclick = () => openForm(5002)
      formbuttonC.onclick = () => openForm(5003)
      setInterval(()=>fetchBlocks("A",5001, 0), refreshInterval);
      setInterval(()=>fetchBlocks("B",5002, 1), refreshInterval);
      setInterval(()=>fetchBlocks("C",5003, 2), refreshInterval);

      // Close the form modal
      closeFormButton.onclick = function () {
        formModal.style.display = 'none';
      };

      // Close the form modal when clicking outside of the form
      window.onclick = function (event) {
        if (event.target == formModal) {
          formModal.style.display = 'none';
        }
      };
    }
    function openForm(port) {
      const formModal = document.getElementById('formModal');
      formModal.style.display = 'block';
      const buttonTransaction = document.getElementById('send-transaction');
      buttonTransaction.onclick = () => processForm(port)
    }
    async function processForm(port) {
      const sender = document.getElementById('sender').value;
      const receiver = document.getElementById('receiver').value;
      const amount = document.getElementById('amount').value;

      const transaction = {}
      transaction.sender = sender
      transaction.receiver = receiver
      transaction.amount = amount

      try {
        console.log("sending transaction on port " + port)
        console.log(transaction)
        await axios.post(`http://localhost:${port}/transaction`, transaction);
        window.alert("Transaction added");

      } catch (error) {
        console.error('Error fetching block template:', error);
      }

      formModal.style.display = 'none';

    }