extends layout
block content
    .container-lg.shadow-4-strong.pt-2.mt-2
        .d-flex.align-items-center.justify-content-between.mt-4
            .d-flex.align-items-center
                h1.mb-0 #{__('Blockchain')}
                div.form-check.form-switch.ms-3.ml-4
                    input.form-check-input(type="checkbox", role="switch", checked=true)#refreshSwitch
                    label.form-check-label.small(for='refreshSwitch') enable auto refresh
            .ms-auto
                button.btn.btn-primary.ladda-button(id='blockmineButton', data-style='expand-right')
                    span.ladda-label #{__('Mine')}
                button.btn.btn-primary.ladda-button(id='openFormButton', data-style='expand-right', onclick='openForm()')
                    span.ladda-label Add Transaction

        .scrollable-horizontal
            .d-flex.flex-row.mt-4#chain


    .modal#formModal
        .modal-content

            span#closeFormButton.close &times;

            form.form-horizontal#transactionForm
                .form-group
                    .col-sm-10
                .form-group
                    label.col-sm-2.control-label Sender:
                    .col-sm-10
                        input.form-control( id="sender")
                .form-group
                    label.col-sm-2.control-label Receiver:
                    .col-sm-10
                        input.form-control( id="receiver")
                .form-group
                    label.col-sm-2.control-label Amount:
                    .col-sm-10
                        input.form-control(type='number', id="amount")
                .form-group
                    .col-sm-2
                        i.icon-spinner.icon-spin.icon-large
                    .col-sm-10
                        button.btn.btn-primary.ladda-button(data-style='expand-right', id="send-transaction")
                            span.ladda-label send transaction


    script.
        $(function () {
            fetchBlocks();
            setup();
        });
        async function getChainBlocks(port) {
            try {

                const response = await axios.get(`http://localhost:${port}/chain`);
                return response.data.chain;
            } catch (error) {
                console.error('Error fetching blocks:', error);
            }
        }

        async function getHashedBlock(block, port) {
            try {
                const response = await axios.post(`http://localhost:${port}/hash`, block);
                block.hash = response.data.hash;
                return block
            } catch (error) {
                console.error('Error fetching blocks:', error);
            }
        }
        async function getHashedBlocksFromChain(port) {
            const blocks = await getChainBlocks(port)
            console.log(`retrieved ${blocks.length} blocks from blockchain`)
            return await Promise.all(blocks.map(block => getHashedBlock(block, port)));
        }
        async function fetchBlocks(chainId = 0) {
            if (!document.getElementById("refreshSwitch").checked) return;

            const blocks = await getHashedBlocksFromChain(5001);
            const blockContainer = document.getElementById("chain");

            for (const block of blocks) {
                const existingBlock = document.getElementById('block' + block.index + 'chain' + chainId + 'well');
                const blockElement = await fetchBlockTemplate(block, chainId);
                const parser = new DOMParser();
                const newNode = parser.parseFromString(blockElement, 'text/html').body.firstChild;

                if (existingBlock) {
                    existingBlock.replaceWith(newNode);
                } else {
                    blockContainer.appendChild(newNode);
                }
            }

            const existingBlocks = blockContainer.children;
            while (existingBlocks.length > blocks.length) {
                blockContainer.removeChild(existingBlocks[existingBlocks.length - 1]);
            }
        }

        async function fetchBlockTemplate(block, chainId = 0) {
            try {
                const response = await axios.post('/render-block', {block, chainId});
                return response.data.html;
            } catch (error) {
                console.error('Error fetching block template:', error);
                return `<div>Error loading block ${block.index}</div>`;
            }
        }

        async function mineBlock(port, button) {
            button.disabled=true
            try {
                console.log("mining on port " + port)
                await axios.post(`http://localhost:${port}/block`);
            } catch (error) {
                console.error('Error fetching block template:', error);
            }
            button.disabled=false
        }
        function setup() {
            const button = document.getElementById('blockmineButton');
            button.onclick = () => mineBlock(5001,button)
            const buttonTransaction = document.getElementById('send-transaction');
            buttonTransaction.onclick = () => processForm(5001)
            setInterval(fetchBlocks, 10000);

            const formModal = document.getElementById('formModal');
            const closeFormButton = document.getElementById('closeFormButton');


            // Close the form modal
            closeFormButton.onclick = function () {
                formModal.style.display = 'none';
            };

            // Close the form modal when clicking outside of the form
            window.onclick = function (event) {
                if (event.target == formModal) {
                    formModal.style.display = 'none';
                }
            };
        }
        function openForm() {
            const formModal = document.getElementById('formModal');
            formModal.style.display = 'block';
        }
        async function processForm(port) {
            const sender = document.getElementById('sender').value;
            const receiver = document.getElementById('receiver').value;
            const amount = document.getElementById('amount').value;

            const transaction = {}
            transaction.sender = sender
            transaction.receiver = receiver
            transaction.amount = amount

            try {
                console.log("sending transaction on port " + port)
                console.log(transaction)
                await axios.post(`http://localhost:${port}/transaction`, transaction);
                window.alert("Transaction added");

            } catch (error) {
                console.error('Error fetching block template:', error);
            }

            formModal.style.display = 'none';

        }